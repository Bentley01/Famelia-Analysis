salesdata <- salesdata[-c(3,6,7)]
head(salesdata)
head(salesdata)
data <- read.csv("Famelia Sales and COS 2011-2015.csv", colClasses = "character")
head(data, 5)
## Convert string date to R Date
data$Date <- as.Date(data$Date, "%d-%m-%y")
## Make Debit and Credit columns numeric
data$Debit <- as.numeric(data$Debit)
data$Credit <- as.numeric(data$Credit)
str(data)
## Create new Amount column Debit(+) and Credit(-)
for (i in 1:nrow(data)){
if (is.na(data$Debit[i])){
data$Amount[i] <- - data$Credit[i]
}
else{
data$Amount[i] <- data$Debit[i]
}
}
## Create new Amount column Debit(+) and Credit(-)
for (i in 1:nrow(data)){
if (is.na(data$Debit[i])){
data$Amount[i] <- - data$Credit[i]
}
else{
data$Amount[i] <- data$Debit[i]
}
}
## Create new Amount column Debit(+) and Credit(-)
for (i in 1:nrow(data)){
if (is.na(data$Debit[i])){
data$Amount[i] <- - data$Credit[i]
}
else{
data$Amount[i] <- data$Debit[i]
}
}
data <- data[-c(3,4)]
## create list of Sales account levels for subsetting
sales <- c("Food Sales","Non-Alcoholic Sales", "Soft Drink Sales", "Beer Sales","Liquor Sales","Wine Sales","Catering Sales")
## create list of restaurant sales levels - no catering/function room rentals
restSales <- c("Food Sales","Non-Alcoholic Sales", "Soft Drink Sales", "Beer Sales","Liquor Sales","Wine Sales")
## Create list of COS account levels for subsetting
cos <- c("Food Purchases","Beer Purchases","Liquor Purchases","Wine Purchases","Misc Food","Kitchen Wine & Cooking Alcohol","Soft Drinks", "Bar Fruit & Herbs","Tea & Coffee")
## Create subset of sales account data only
salesdata <- subset(data, Account %in% sales, drop=TRUE, na.rm=T)
salesdata <- na.omit(salesdata)
restdata <- subset(data, Account %in% restSales, drop=TRUE, na.rm=T)
restdata <- na.omit(restdata)
cosdata <- subset(data, Account %in% cos, drop=TRUE, na.rm=T)
cosdata <- na.omit(cosdata)
data <- na.omit(data)
## Make Account a factor, with levels equal to sales categories
salesdata$Account <- as.factor(salesdata$Account)
restdata$Account <- as.factor(restdata$Account)
cosdata$Account >- as.factor(cosdata$Account)
library("reshape2")
## Convert salesdata from long to wide, using Account
head(cosdata)
tail.matrix(cosdata)
salesdata <- dcast(salesdata, Date~Account, sum)
restdata <- dcast(restdata, Date~Account, sum)
salesdata$`Beverage Sales` <- salesdata$`Non-Alcoholic Sales` + salesdata$`Soft Drink Sales`
salesdata$`Food Sales` <- salesdata$`Food Sales` + salesdata$`Catering Sales`
head(salesdata)
salesdata <- salesdata[-c(3,6,7)]
head(salesdata)
restdata$`Beverage Sales` <- restdata$`Non-Alcoholic Sales` + restdata$`Soft Drink Sales`
restdata$`Food Sales` <- restdata$`Food Sales` + restdata$`Catering Sales`
head(restdata)
restdata <- restdata[-c(3,6,7)]
head(restdata)
data <- read.csv("Famelia Sales and COS 2011-2015.csv", colClasses = "character")
head(data, 5)
## Convert string date to R Date
data$Date <- as.Date(data$Date, "%d-%m-%y")
## Make Debit and Credit columns numeric
data$Debit <- as.numeric(data$Debit)
data$Credit <- as.numeric(data$Credit)
str(data)
for (i in 1:nrow(data)){
if (is.na(data$Debit[i])){
data$Amount[i] <- - data$Credit[i]
}
else{
data$Amount[i] <- data$Debit[i]
}
}
data <- data[-c(3,4)]
## create list of Sales account levels for subsetting
sales <- c("Food Sales","Non-Alcoholic Sales", "Soft Drink Sales", "Beer Sales","Liquor Sales","Wine Sales","Catering Sales")
## create list of restaurant sales levels - no catering/function room rentals
restSales <- c("Food Sales","Non-Alcoholic Sales", "Soft Drink Sales", "Beer Sales","Liquor Sales","Wine Sales")
## Create list of COS account levels for subsetting
cos <- c("Food Purchases","Beer Purchases","Liquor Purchases","Wine Purchases","Misc Food","Kitchen Wine & Cooking Alcohol","Soft Drinks", "Bar Fruit & Herbs","Tea & Coffee")
## Create subset of sales account data only
salesdata <- subset(data, Account %in% sales, drop=TRUE, na.rm=T)
salesdata <- na.omit(salesdata)
restdata <- subset(data, Account %in% restSales, drop=TRUE, na.rm=T)
restdata <- na.omit(restdata)
cosdata <- subset(data, Account %in% cos, drop=TRUE, na.rm=T)
cosdata <- na.omit(cosdata)
data <- na.omit(data)
## Make Account a factor, with levels equal to sales categories
salesdata$Account <- as.factor(salesdata$Account)
restdata$Account <- as.factor(restdata$Account)
cosdata$Account <- as.factor(cosdata$Account)
library("reshape2")
salesdata <- dcast(salesdata, Date~Account, sum)
restdata <- dcast(restdata, Date~Account, sum)
salesdata$`Beverage Sales` <- salesdata$`Non-Alcoholic Sales` + salesdata$`Soft Drink Sales`
salesdata$`Food Sales` <- salesdata$`Food Sales` + salesdata$`Catering Sales`
head(salesdata)
salesdata <- salesdata[-c(3,6,7)]
head(salesdata)
restdata$`Beverage Sales` <- restdata$`Non-Alcoholic Sales` + restdata$`Soft Drink Sales`
restdata$`Food Sales` <- restdata$`Food Sales` + restdata$`Catering Sales`
head(restdata)
restdata <- restdata[-c(5,6)]
head(restdata)
head(cosdata)
cosdata <- dcast(cosdata, Date~Account, sum)
head(cosdata)
data <- read.csv("Famelia Sales and COS 2011-2015.csv", colClasses = "character")
head(data, 5)
## Convert string date to R Date
data$Date <- as.Date(data$Date, "%d-%m-%y")
## Make Debit and Credit columns numeric
data$Debit <- as.numeric(data$Debit)
data$Credit <- as.numeric(data$Credit)
str(data)
for (i in 1:nrow(data)){
if (is.na(data$Debit[i])){
data$Amount[i] <- - data$Credit[i]
}
else{
data$Amount[i] <- data$Debit[i]
}
}
data <- data[-c(3,4)]
## create list of Sales account levels for subsetting
sales <- c("Food Sales","Non-Alcoholic Sales", "Soft Drink Sales", "Beer Sales","Liquor Sales","Wine Sales","Catering Sales")
## create list of restaurant sales levels - no catering/function room rentals
restSales <- c("Food Sales","Non-Alcoholic Sales", "Soft Drink Sales", "Beer Sales","Liquor Sales","Wine Sales")
## Create list of COS account levels for subsetting
cos <- c("Food Purchases","Beer Purchases","Liquor Purchases","Wine Purchases","Misc Food","Kitchen Wine & Cooking Alcohol","Soft Drinks", "Bar Fruit and Herbs","Tea & Coffee")
## Create subset of sales account data only
salesdata <- subset(data, Account %in% sales, drop=TRUE, na.rm=T)
salesdata <- na.omit(salesdata)
restdata <- subset(data, Account %in% restSales, drop=TRUE, na.rm=T)
restdata <- na.omit(restdata)
cosdata <- subset(data, Account %in% cos, drop=TRUE, na.rm=T)
cosdata <- na.omit(cosdata)
data <- na.omit(data)
## Make Account a factor, with levels equal to sales categories
salesdata$Account <- as.factor(salesdata$Account)
restdata$Account <- as.factor(restdata$Account)
cosdata$Account <- as.factor(cosdata$Account)
library("reshape2")
salesdata <- dcast(salesdata, Date~Account, sum)
restdata <- dcast(restdata, Date~Account, sum)
cosdata <- dcast(cosdata, Date~Account, sum)
salesdata$`Beverage Sales` <- salesdata$`Non-Alcoholic Sales` + salesdata$`Soft Drink Sales`
salesdata$`Food Sales` <- salesdata$`Food Sales` + salesdata$`Catering Sales`
head(salesdata)
salesdata <- salesdata[-c(3,6,7)]
head(salesdata)
restdata$`Beverage Sales` <- restdata$`Non-Alcoholic Sales` + restdata$`Soft Drink Sales`
restdata$`Food Sales` <- restdata$`Food Sales` + restdata$`Catering Sales`
head(restdata)
restdata <- restdata[-c(5,6)]
head(restdata)
head(restdata)
cosdata$`Beverage COS` <- cosdata$`Soft Drinks` + cosdata$`Tea & Coffee`
cosdata$`Food Purchases` <- cosdata$`Food Purchases` + cosdata$`Kitchen Wine & Cooking Alcohol` + cosdata$`Misc Food`
cosdata$`Liquor Purchases` <- cosdata$`Liquor Purchases` + cosdata$`Bar Fruit and Herbs`
head(cosdata)
cosdata <- cosdata[-c(2,5,7,8,9)]
head(cosdata)
salesdata$Sales <- rowSums(salesdata[,2:8])
head(salesdata)
salesdata$Sales <- rowSums(salesdata[,2:6])
restdata$Sales <- rowSums(restdata[,2:6])
## Create a Day of Week column for the actual day of week, based on Date
salesdata$DofW <- format(salesdata$Date, "%a")
restdata$DofW <- format(restdata$Date, "%a")
restdata$Month <- format(restdata$Date, "%m")
## Make DofW a factor, with levels equal to 7 days of the week
salesdata$DofW <- as.factor(salesdata$DofW)
restdata$DofW <- as.factor(restdata$DofW)
## Change order of day of week factor levels
salesdata$DofW <- factor(salesdata$DofW, levels = c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"))
restdata$DofW <- factor(restdata$DofW, levels = c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"))
head(restdata)
l classes - using month # (start, end)
winter = c(1,3)
spring = c(4,5)
summer = c(6,8)
fall = c(9,12)
<- subset(restdata, as.numeric(format(restdata$Date, "%m")) >= winter[1] & as.numeric(format(restdata$Date, "%m")) <= winter[2], drop=T, na.rm=T)
winterdata <- na.omit(winterdata)
springdata <- subset(restdata, as.numeric(format(restdata$Date, "%m")) >= spring[1] & as.numeric(format(restdata$Date, "%m")) <= spring[2], drop=T, na.rm=T)
springdata <- na.omit(springdata)
summerdata <- subset(restdata, as.numeric(format(restdata$Date, "%m")) >= summer[1] & as.numeric(format(restdata$Date, "%m")) <= summer[2], drop=T, na.rm=T)
summerdata <- na.omit(summerdata)
falldata <- subset(restdata, as.numeric(format(restdata$Date, "%m")) >= fall[1] & as.numeric(format(restdata$Date, "%m")) <= fall[2], drop=T, na.rm=T)
falldata <-
winterdata <- subset(restdata, as.numeric(format(restdata$Date, "%m")) >= winter[1] & as.numeric(format(restdata$Date, "%m")) <= winter[2], drop=T, na.rm=T)
dayMeans <- tapply((-salesdata$Sales), salesdata$DofW, mean)
daySds <- tapply((-salesdata$Sales), salesdata$DofW, sd)
restdayMeans <- tapply((-restdata$Sales), restdata$DofW, mean)
restdaySds <- tapply((-restdata$Sales), restdata$DofW, sd)
winterdayMeans <- tapply((-winterdata$Sales), winterdata$DofW, mean)
winterdaySds <- tapply((-winterdata$Sales), winterdata$DofW, sd)
springdayMeans <- tapply((-springdata$Sales), springdata$DofW, mean)
springdaySds <- tapply((-springdata$Sales), springdata$DofW, sd)
summerdayMeans <- tapply((-summerdata$Sales), summerdata$DofW, mean)
summerdaySds <- tapply((-summerdata$Sales), summerdata$DofW, sd)
falldayMeans <- tapply((-falldata$Sales), falldata$DofW, mean)
falldaySds <- tapply((-falldata$Sales), falldata$DofW, sd)
library("ggplot2")
## Box plot of sales by day
ggplot(salesdata, aes(x=factor(DofW), y=-Sales)) + geom_boxplot(outlier.size=1.5, outlier.shape=21) + stat_summary(fun.y="mean", geom="point", shape=23, size=3, fill="white")
## Violin plot of sales by day
ggplot(salesdata, aes(x=factor(DofW), y=-Sales)) + geom_violin(trim=FALSE, scale="count", fill="blue") + geom_boxplot(width=.1, fill="lightblue", outlier.colour=NA) + stat_summary(fun.y="mean", geom="point", shape=21, size=2.5, fill="white")
ggplot(restdata, aes(x=factor(DofW), y=-Sales)) + geom_violin(trim=FALSE, scale="count", fill="blue") + geom_boxplot(width=.1, fill="lightblue", outlier.colour=NA) + stat_summary(fun.y="mean", geom="point", shape=21, size=2.5, fill="white")
## Histogram of sales by day of week with density plot overlay
ggplot(salesdata, aes(x=-Sales, y=..density..)) + geom_histogram(fill="lightblue", colour="black", binwidth=200) + facet_grid(DofW ~ .) + geom_density(colour="red")
ggplot(restdata, aes(x=-Sales, y=..density..)) + geom_histogram(fill="lightblue", colour="black", binwidth=200) + facet_grid(DofW ~ .) + geom_density(colour="red")
vline.data <- data.frame(lower = dayMeans - daySds, upper = dayMeans + daySds)
vline.data$DofW <- rownames(vline.data)
restvline.data <- data.frame(lower = restdayMeans - restdaySds, upper = restdayMeans + restdaySds)
restvline.data$DofW <- rownames(restvline.data)
## Histogram, density and 1 st.dev. vertical lines
ggplot(salesdata, aes(x=-Sales, y=..density..)) + geom_histogram(fill="lightblue", colour="black", binwidth=200) + facet_grid(DofW ~ .) + geom_density(colour="red") + geom_vline(data=vline.data, aes(xintercept=lower)) + geom_vline(data=vline.data, aes(xintercept=upper)) + xlim(0, max(-(salesdata$Sales)))
ggplot(restdata, aes(x=-Sales, y=..density..)) + geom_histogram(fill="lightblue", colour="black", binwidth=200) + facet_grid(DofW ~ .) + geom_density(colour="red") + geom_vline(data=restvline.data, aes(xintercept=lower)) + geom_vline(data=restvline.data, aes(xintercept=upper)) + xlim(0, max(-(restdata$Sales)))
restdata.describe()
restdata.summary()
winterdayMeans
summary(restdata)
summary(cosdata)
plot(restdata$Date, restdata$Sales, type="l")
ggplot(restdata, aes(x=Date, y=Sales), + geom_line())
ggplot(data=restdata, aes(x=Date, y=Sales), + geom_line() + geom_point())
ggplot(data=restdata, aes(x=Date, y=-Sales), + geom_line() + geom_point())
str(restdata)
ggplot(data=restdata, aes(x=Date, y=-Sales), + geom_line(colour="blue") + geom_point())
ggplot(data=restdata, aes(x=Date, y=-Sales), + geom_area())
ggplot(data=restdata, aes(x=Date, y=-Sales), + geom_bar())
ggplot(data=springdata, aes(x=Date, y=-Sales), + geom_bar())
library("ggplot")
ggplot(restdata, aes(Date, -Sales), + geom_line())
ggplot(restdata, aes(restdata$Date, -restdata$Sales), + geom_line() + scale_x_date(format="%b-%Y"))
qplot(Date, Sales, data = restdata, geom = "line")
qplot(Date, -Sales, data = restdata, geom = "line")
require(ggplot2)
ggplot(aes(x=Date, y=-Sales), data = restdata) + geom_point()
ggplot(aes(x=Date, y=-Sales), data = restdata) + geom_line()
ggplot(aes(x=Date, y=-Sales), data = restdata) + geom_point()
dayMeans <- tapply((-salesdata$Sales), salesdata$DofW, mean)
dayMeans
winterdayMeans
springdayMeans
falldayMeans
summerdayMeans
library(plyr)
mean(restdata$Sales)
mean(winterdata$Sales)
mean(restdata$Sales)
mean(winterdata$Sales)
mean(springdata$Sales)
mean(summerdata$Sales)
mean(falldata$Sales)
## Summary statistics for each season & overall
summary(restdata)
summary(winterdata)
summary(springdata)
summary(summerdata)
summary(falldata)
winterdayMeans
winterdayMeans
springdayMeans
summerdayMeans
falldayMeans
restdayMeans
mean(restdata$Sales)
mean(winterdata)
mean(winterdata$Sales)
head(restdata)
str(winterdayMeans)
winterdayMeans[restdata$DofW[0]]
winterdayMeans[0]
winterdayMeans['Thu']
winterdayMeans
mean(restdata$Sales)
winterfactor = winterdayMeans / -mean(restdata$Sales)
winterfactor
str(restdata)
library(zoo)
install.packages("zoo")
library(zoo)
head(restdata)
ser <- with(restdata, zoo(Sales, Date))
str(ser)
ser <- with(restdata, zoo(-Sales, Date))
str(ser)
head(ser)
plot(ser)
dtype(ser)
ser.dtype
ser.dtype()
index(ser)
coredata(ser)
mean(restdata$Sales)
winterdayMeans
winterfactor = winterdayMeans / -mean(restdata$Sales)
winterfactor
str(restdata)
mean(-restdata$Sales)
mean(winterdata$Sales)
fallfactor = falldayMeans / mean(restdata$Sales)
fallfactor
mean(-restdata$Sales)
mean(-winterdata$Sales)
mean(-springdata$Sales)
mean(-summerdata$Sales)
mean(-falldata$Sales)
## Summary statistics for each season & overall
summary(restdata)
summary(winterdata)
summary(springdata)
summary(summerdata)
summary(falldata)
## Means by day of week for each season
winterdayMeans
springdayMeans
summerdayMeans
falldayMeans
restdayMeans
## Deseasoning factors, by day
winterfactor = winterdayMeans / mean(restdata$Sales)
springfactor = springdayMeans / mean(restdata$Sales)
summerfactor = summerdayMeans / mean(restdata$Sales)
fallfactor = falldayMeans / mean(restdata$Sales)
winterfactor
springfactor
summerfactor
fallfactor
winterfactor = winterdayMeans / mean(-restdata$Sales)
springfactor = springdayMeans / mean(-restdata$Sales)
summerfactor = summerdayMeans / mean(-restdata$Sales)
fallfactor = falldayMeans / mean(-restdata$Sales)
winterfactor
springfactor
summerfactor
fallfactor
head(restdata)
restdayMeans
type(restdayMeans)
class(restdayMeans)
restdayMeans.Mon
restdayMeans$Mon
restdayMeans[Mon]
restdayMeans['Mon']
library(data.table)
install.packages("data.table")
library(data.table)
DT <- data.table(restdata)
head(DT)
str(DT)
DT[, Season := ifelse(Month %in% c("01","02","03"), "Winter",)]
DT[, Season := ifelse(Month %in% c("01","02","03"), "Winter",
ifelse(Month %in% c('04','05'), "Spring",))]
DT <- data.table(restvline.data)
DT[, Season := ifelse(Month %in% c("01","02","03"), "Winter",
ifelse(Month %in% c("04","05"), "Spring",
ifelse(Month %in% c("06","07","08"), "Summer",
ifelse(Month %in% c("09","10","11","12"), "Fall", NA))))]
head(DT)
DT <- data.table(restdata)
DT[, Season := ifelse(Month %in% c("01","02","03"), "Winter",
ifelse(Month %in% c("04","05"), "Spring",
ifelse(Month %in% c("06","07","08"), "Summer",
ifelse(Month %in% c("09","10","11","12"), "Fall", NA))))]
head(DT)
str(DT)
sapply(DT, class)
DT <- DT[, Season := as.factor(Season)]
str(DT)
winterfactor
mean(-winterdata$Sales)
names(restdata$Season)
levels(restdata$Season)
str(restdata)
levels(restdata$DofW)
levels(DF$Season)
levels(DT$Season)
str(DT)
library(plyr)
ddply(DT, ~Season, function(x) mean(x))
normalize <- function(df) {
ifelse(df$Season == 1, factor = fallfactor,
ifelse(df$Season == 2, factor = springfactor,
ifelse(df$Season == 3, factor = summerfactor, factor = winterfactor)))
factor
}
mapply(normalize, restdata$Season)
normalize <- function(df) {
factor <- ifelse(df$Season == 1, fallfactor,
ifelse(df$Season == 2, springfactor,
ifelse(df$Season == 3, summerfactor, winterfactor)))
factor
}
mapply(normalize, restdata$Season)
normalize <- function(df) {
factor <- ifelse(df$Season == 1, fallfactor,
ifelse(df$Season == 2, springfactor,
ifelse(df$Season == 3, summerfactor, winterfactor)))
factor
}
restdata$Test <- mapply(normalize, restdata$Season)
normalize <- function(df) {
ifelse(df$Season == 1, df$Sales / fallfactor,
ifelse(df$Season == 2, df$Sales / springfactor,
ifelse(df$Season == 3, df$Sales / summerfactor, df$Sales / winterfactor)))
}
restdata$Test <- mapply(normalize, restdata$Season)
ddply(DT, ~Season, function(x) mean(x$))
head(restdata$Season)
DT$Test <- mapply(normalize, DT$Season)
DT.Test <- mapply(normalize, DT.Season)
DT[,Test] <- mapply(normalize, DT[,Season])
restdata$Test <- mapply(normalize, restdata$Season)
head(DT)
install.packages("dplyr")
library(dplyr)
DT1 <- dplyr(DT, c(Season, DofW))
DT1 <- group_by(DT, c(Season, DofW))
DT1 <- group_by(DT, Season)
DT1
summarize(DT1)
DT %>% groupby(Season) %>% summarize(.DT)
DT %>% group_by(Season) %>% summarize(.DT)
DT %>% group_by(Season) %>% DT
DT %>% group_by(Season) %>% DT$Sales
DT %>% group_by(Season) %>% DT[,Sales]
restdata <- group_by(restdata, DofW)
summarize(restdata, meansales = mean(-Sales, na.rm = TRUE))
apply(restdata, 1, function(x) x$Sales / (restdayMeans[x$DofW] / mean(x$Sales))  )
apply(restdata, 1, function(x) Sales / (restdayMeans[DofW] / mean(Sales))  )
head(restdata)
apply(restdata, 1, function(x) x[7] / (restdayMeans[x[8]] / mean(x[7]))  )
apply(restdata, 1, function(x) x[7] / (restdayMeans[x[8]] / mean(restdata$Sales))  )
apply(restdata, 1, function(x) x[7] / (restdayMeans[as.numeric(x[8])] / mean(restdata$Sales))  )
apply(restdata, 1, function(x) x[7] / (restdayMeans[1] / mean(restdata$Sales))  )
restdayMeans
meansales = mean(-restdata$Sales)
apply(restdata, 1, function(x) x[7] / (restdayMeans[1] / meansales)  )
restdayMeans[1]
restdayMeans[1][1]
restdayMeans[1][2]
restdayMeans[[1]]
apply(restdata, 1, function(x) x[7] / (restdayMeans[[1]] / meansales)  )
restdata[7]
testfunction <- function(df) {
-df$Sales / (restdayMeans[[df$DofW]] / meansales)
}
apply(restdata, 1, testfunction(x))
apply(restdata, 1, testfunction())
apply(restdata, 1, function(x) testfunction(x))
testfunction <- function(df) {
-df[7] / (restdayMeans[[df$DofW]] / meansales)
}
apply(restdata, 1, function(x) testfunction(x))
testfunction <- function(df) {
-df[[7] / (restdayMeans[[df$DofW]] / meansales)
}
testfunction <- function(df) {
-df[[7] / (restdayMeans[[df$DofW]] / meansales)
}
testfunction <- function(df) {
-df[[7]] / (restdayMeans[[df$DofW]] / meansales)
}
apply(restdata, 1, function(x) testfunction(x))
testfunction <- function(df, meansales = meansales) {
-df[7] / (restdayMeans[[df$DofW]] / meansales)
}
restdata$Test = apply(restdata, 1, testfunction(df))
restdata$Test = apply(restdata[, c()], 1, testfunction(df))
restdata$Test = apply(restdata[, c('Sales','DofW')], 1, function(x) x[Sales] / (restdayMeans[[DofW]] / meansales))
restdata$Test = apply(restdata[, c('Sales','DofW')], 1, function(x) x['Sales'] / (restdayMeans[['DofW']] / meansales))
restdayMeans
restdayMeans[1]
restdayMeans[1][1]
restdayMeans[[1]
]
head(restdata)
levels(restdata$DofW)
mode(restdata$DofW)
modes(restdata$DofW)
testfunction <- function(df, meansales = meansales){
if (df$DofW == 'Mon') { ndx = 1 }
else if (df$DofW == 'Tue') { ndx = 2 }
else if (df$DofW == 'Wed') { ndx = 3 }
else if (df$DofW == 'Thu') { ndx = 4 }
else if (df$DofW == 'Fri') { ndx = 5 }
else if (df$DofW == 'Sat') { ndx = 6 }
else { ndx = 7 }
result = (df['Sales'] / (restdayMeans[[ndx]] / meansales))
}
restdata$Test = apply(restdata, 1, testfunction(df))
